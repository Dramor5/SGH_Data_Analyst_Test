name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
?dbExecute
query <- "PRAGMA table_info(diabetes_data);"
column_info <- dbGetQuery(conn, query)
print(column_info)
query <- "PRAGMA table_info(diabetes_data_modified);"
column_info <- dbGetQuery(conn, query)
print(column_info)
dbRemoveTable(conn,
'diabetes_data',
'diabetes_data_modified')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
# List all tables in the database
tables <- dbListTables(conn)
# Print the list of tables
cat("Tables in the database:\n")
cat(tables, sep = "\n")
dbRemoveTable(conn,
'diabetes_data')
# List all tables in the database
tables <- dbListTables(conn)
# Print the list of tables
cat("Tables in the database:\n")
cat(tables, sep = "\n")
dbRemoveTable(conn,'diabetes_data_modified')
# Loading of data.
df <- read_tsv(relative_path)
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
dbRemoveTable(conn,'diabetes_data')
# List all tables in the database
tables <- dbListTables(conn)
# Print the list of tables
cat("Tables in the database:\n")
cat(tables, sep = "\n")
# Loading of data.
df <- read_tsv(relative_path)
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
# Remove BMI column in copied table.
query <- "ALTER TABLE diabetes_data_modified DROP COLUMN bmi;"
dbExecute(conn, query)
# Obtain the two different tables
query <- "SELECT * FROM diabetes_data"
pure_df <- dbGetQuery(conn, query)
query <- "SELECT * FROM diabetes_data_modified"
modded_df <- dbGetQuery
modded_df <- dbGetQuery(conn, query)
# Count the number of entries
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
dbExecute(conn, query)
# Print the list of tables
cat("Tables in the database:\n")
cat(tables, sep = "\n")
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
# List all tables in the database
tables <- dbListTables(conn)
# Print the list of tables
cat("Tables in the database:\n")
cat(tables, sep = "\n")
dbRemoveTable(conn,'diabetes_data')
dbRemoveTable(conn,'diabetes_data_modified')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
# Remove BMI column in copied table.
query <- "ALTER TABLE diabetes_data_modified DROP COLUMN bmi;"
dbExecute(conn, query)
# Count the number of entries
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
dbExecute(conn, query)
dbGetQuery(conn, query)
# Count the number of entries
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
dbGetQuery(conn, query)
rows <- dbGetQuery(conn, query)
print(dbGetQuery(conn, query))
# Count the number of entries
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
print(dbGetQuery(conn, query))
rows <- dbGetQuery(conn, query)
View(rows)
print(rows)
print(paste('current entries:', dbGetQuery(conn, query)))
print(paste('number of entries with atleast one NA', dbGetQuery(conn, query)))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data_modified WHERE diabetes_data_modified IS NULL"
print(paste('number of entries with atleast one NA', dbGetQuery(conn, query)))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data_modified WHERE * IS NULL"
print(paste('number of entries with atleast one NA', dbGetQuery(conn, query)))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data_modified WHERE income SS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL;"
print(paste('number of entries with atleast one NA', dbGetQuery(conn, query)))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data_modified WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL;"
print(paste('number of entries with atleast one NA', dbGetQuery(conn, query)))
# Set working directory
knitr::opts_chunk$set(include = FALSE)
# knitr::opts_knit$set(root.dir = 'C:/Users/Dramor/OneDrive - Nanyang Technological University/MIMIC-IV/mimic-iv-clinical-database-demo-2.2/icu')
# Define a relative path to a file or directory
relative_path <- file.path('Data', 'nhgh.tsv')
image_path <- file.path('Images','data_dictionary.png')
# Load packages
library(tidyverse)
library(ggplot2)
library(DBI)
# Setting global seed for reproducibility
set.seed(777)
# Loading of data.
df <- read_tsv(relative_path)
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
dbRemoveTable(conn,'diabetes_data')
dbRemoveTable(conn,'diabetes_data_modified')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
# Remove BMI column in copied table.
query <- "ALTER TABLE diabetes_data_modified DROP COLUMN bmi;"
dbExecute(conn, query)
# Count the number of entries
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
print(paste('current entries:', dbGetQuery(conn, query)))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data_modified WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL;"
print(paste('number of entries with atleast one NA', dbGetQuery(conn, query)))
### Check cols
query <- "PRAGMA table_info(diabetes_data_modified);"
column_info <- dbGetQuery(conn, query)
print(column_info)
###
# List all tables in the database
tables <- dbListTables(conn)
# Print the list of tables
cat("Tables in the database:\n")
cat(tables, sep = "\n")
# Loading of data.
df <- read_tsv(relative_path)
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
dbRemoveTable(conn,'diabetes_data')
dbRemoveTable(conn,'diabetes_data_modified')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
# Remove BMI column in copied table.
query <- "ALTER TABLE diabetes_data_modified DROP COLUMN bmi;"
dbExecute(conn, query)
# Count the number of entries
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
print(paste('current entries:', dbGetQuery(conn, query)))
### Check cols
query <- "PRAGMA table_info(diabetes_data_modified);"
column_info <- dbGetQuery(conn, query)
print(column_info)
###
# List all tables in the database
tables <- dbListTables(conn)
# Print the list of tables
cat("Tables in the database:\n")
cat(tables, sep = "\n")
# Loading of data.
df <- read_tsv(relative_path)
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
dbRemoveTable(conn,'diabetes_data')
dbRemoveTable(conn,'diabetes_data_modified')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
# Remove BMI column in copied table.
query <- "ALTER TABLE diabetes_data_modified DROP COLUMN bmi;"
dbExecute(conn, query)
# Count the number of entries
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
print(paste('current entries:', dbGetQuery(conn, query)))
### Check cols
# query <- "PRAGMA table_info(diabetes_data_modified);"
# column_info <- dbGetQuery(conn, query)
# print(column_info)
###
# List all tables in the database
tables <- dbListTables(conn)
# Print the list of tables
# cat("Tables in the database:\n")
# cat(tables, sep = "\n")
# Loading of data.
df <- read_tsv(relative_path)
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
dbRemoveTable(conn,'diabetes_data')
dbRemoveTable(conn,'diabetes_data_modified')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
# Loading of data.
df <- read_tsv(relative_path)
# Loading of data.
df <- read_tsv(relative_path,
show_col_types = FALSE)
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
View(df)
# Loading of data.
df <- read_tsv(relative_path,
show_col_types = FALSE)
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
dbRemoveTable(conn,'diabetes_data')
dbRemoveTable(conn,'diabetes_data_modified')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
# Remove BMI column in copied table.
query <- "ALTER TABLE diabetes_data_modified DROP COLUMN bmi;"
dbExecute(conn, query)
# Count the number of entries
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
print(paste('current entries:', dbGetQuery(conn, query)))
### Check cols
# query <- "PRAGMA table_info(diabetes_data_modified);"
# column_info <- dbGetQuery(conn, query)
# print(column_info)
###
# List all tables in the database
tables <- dbListTables(conn)
# Print the list of tables
# cat("Tables in the database:\n")
# cat(tables, sep = "\n")
dbRemoveTable(conn,'diabetes_data')
dbRemoveTable(conn,'diabetes_data_modified')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Create a copy of the table for my own modifications.
query <- "CREATE TABLE diabetes_data_modified AS SELECT * FROM diabetes_data"
dbExecute(conn, query)
?dbExecute
# Count the number of entries.
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
print(paste('current entries:', dbGetQuery(conn, query)))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data_modified WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL;"
print(paste('number of entries with atleast one NA', dbGetQuery(conn, query)))
df <- dbGetQuery(conn, query)
# Analyze the whole dataset first.
query <- 'SELECT * FROM diabetes_data'
df <- dbGetQuery(conn, query)
View(df)
install.packages('naniar')
library(naniar)
dbDisconnect()
dbDisconnect(conn)
vismiss(df)
vismis(df)
vis_miss(df)
# Analyze the whole dataset first.
query <- 'SELECT * FROM diabetes_data'
df <- dbGetQuery(conn, query)
# Loading of data.
df <- read_tsv(relative_path,
show_col_types = FALSE)
# Open a SQLite connection.
conn <- dbConnect(RSQLite::SQLite(), dbname = 'diabetes.db')
dbRemoveTable(conn,'diabetes_data')
dbRemoveTable(conn,'diabetes_data_modified')
# Create a new table within the database.
dbWriteTable(conn,
name = 'diabetes_data',
value = df,
overwrite = TRUE)
# Analyze the whole dataset first.
query <- 'SELECT * FROM diabetes_data'
df <- dbGetQuery(conn, query)
vis_miss(df)
# Count the number of entries.
query <- "SELECT COUNT(*) FROM diabetes_data_modified"
initial_row_count <- dbGetQuery(conn, query)
# Count the number of entries.
query <- "SELECT COUNT(*) FROM diabetes_data"
initial_row_count <- dbGetQuery(conn, query)
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_dat WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL;"
print(paste('number of entries with atleast one NA', dbGetQuery(conn, query)))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL;"
print(paste('number of entries with atleast one NA', dbGetQuery(conn, query)))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL;"
row_count_no_NA <- dbGetQuery(conn, query)
# Count the number of entries.
query <- "SELECT COUNT(*) FROM diabetes_data"
initial_row_count <- dbGetQuery(conn, query)
initial_row_count
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL"
row_count_no_NA <- dbGetQuery(conn, query)
row_count_no_NA
print(initial_row_count)
# Count the number of entries.
query <- "SELECT COUNT(*) FROM diabetes_data"
initial_row_count <- dbGetQuery(conn, query)
initial_row_count
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL"
row_count_no_NA <- dbGetQuery(conn, query)
row_count_no_NA
print(paste('Initial row count:', initial_row_count))
print(paste('Row count after NA removals:', row_count_no_NA))
print(paste('percent data lost:', row_count_no_NA/initial_row_count*100, '%'))
print(paste('percent data lost:', round(row_count_no_NA/initial_row_count*100), '%', sep = ','))
print(paste('percent data lost:', round(row_count_no_NA/initial_row_count*100), '%', sep = ''))
print(paste('percent data lost: ', round(row_count_no_NA/initial_row_count*100), '%', sep = ''))
print(paste('percent data lost: ', round(row_count_no_NA/initial_row_count*100), ' %', sep = ''))
print(paste('percent data lost: ', round(row_count_no_NA/initial_row_count*100), '%', sep = ''))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL"
row_count_no_NA <- dbGetQuery(conn, query)
print(paste('Row count after NA removals:', row_count_no_NA))
print(paste('percent data lost: ', round(row_count_no_NA/initial_row_count*100), '%', sep = ''))
# Count the number of entries.
query <- "SELECT COUNT(*) FROM diabetes_data"
initial_row_count <- dbGetQuery(conn, query)
print(paste('Initial row count:', initial_row_count))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL"
row_count_no_NA <- dbGetQuery(conn, query)
print(paste('Row count after NA removals:', row_count_no_NA))
# Calculate the amount of data lost.
print(paste('Percent data lost: ', round(row_count_no_NA/initial_row_count*100), '%', sep = ''))
# Count the number of entries.
query <- "SELECT COUNT(*) FROM diabetes_data"
initial_row_count <- dbGetQuery(conn, query)
print(paste('Initial row count:', initial_row_count))
# Count number of entries with atleast one NA in them.
query <- "SELECT COUNT(*) FROM diabetes_data WHERE income iS NULL OR leg IS NULL OR arml IS NULL OR armc IS NULL OR waist IS NULL OR tri IS NULL OR sub IS NULL OR albumin IS NULL OR bun IS NULL OR Scr IS NULL"
row_count_no_NA <- dbGetQuery(conn, query)
print(paste('Rows with atleast one NA:', row_count_no_NA))
# Calculate the amount of data lost.
print(paste('Percent data lost: ', round(row_count_no_NA/initial_row_count*100), '%', sep = ''))
# Load dataset into memory.
query <- 'SELECT * FROM diabetes_data'
df <- dbGetQuery(conn, query)
install.packages('ggpair')
library(ggpair)
library(ggpair)
install.packages('GGally')
library(GGally)
# Plot different features against one another, check for possible correlations.
ggpairs(df)
View(df)
# Load dataset into memory.
query <- 'SELECT * FROM diabetes_data'
df <- dbGetQuery(conn, query)
# Get rid of seqn col.
df <- df[,2:ncol(df)]
# Plot different features against one another, check for possible correlations.
ggpairs(df)
# Plot boxplots for all variables, identify possible outliers.
str(df)
# List all tables in the database
tables <- dbListTables(conn)
# Print the list of tables
cat("Tables in the database:\n")
cat(tables, sep = "\n")
## Create new table `continuous_var`.
query <- 'CREATE TABLE continuous_var AS SELECT * FROM diabetes_data'
dbExecute(conn, query)
# Remove categorical variables.
query <- "ALTER TABLE diabetes_data_modified DROP COLUMN seqn, sex, re, income, tx, dx;"
dbExecute(conn, query)
## Create new table `continuous_var`.
query <- 'CREATE TABLE continuous_var AS SELECT age, wt, ht, bmi, leg, arml, armc, waist, tri, sub, gh, albumin, bun, SCr FROM diabetes_data'
continuous <- dbGetQuery(conn, query)
continuous <- dbGetQuery(conn, query)
## Create new table `continuous_var`.
query <- 'CREATE TABLE continuous_var AS SELECT age, wt, ht, bmi, leg, arml, armc, waist, tri, sub, gh, albumin, bun, SCr FROM diabetes_data'
continuous <- dbGetQuery(conn, query)
## Create new table `continuous_var`.
query <- 'CREATE TABLE continuous_var AS SELECT age, wt, ht, bmi, leg, arml, armc, waist, tri, sub, gh, albumin, bun, SCr FROM diabetes_data'
continuous <- dbGetQuery(conn, query)
## Create new table `continuous_var`.
query <- 'SELECT age, wt, ht, bmi, leg, arml, armc, waist, tri, sub, gh, albumin, bun, SCr FROM diabetes_data'
continuous <- dbGetQuery(conn, query)
# Obtain continuous variables.
query <- 'SELECT age, wt, ht, bmi, leg, arml, armc, waist, tri, sub, gh, albumin, bun, SCr FROM diabetes_data'
continuous_df <- dbGetQuery(conn, query)
# Obtain categorical variables
query <- 'SELECT sex, re, income, tx, dx FROM diabetes_data'
categorical_df <- dbGetQuery(conn, query)
ggpairs(continuous_df)
?ggplot
install.packages('reshape2')
# Setting global seed for reproducibility
set.seed(777)
library(reshape2)
lol <- melt(continuous_df)
View(lol)
ggplot(lol, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free")
View(lol)
ggplot(lol, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free")
summary(continuous_df)
lol <- melt(continuous_df)
ggplot(lol, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free")
# Transform into a two col
continuous_df_long <- melt(continuous_df)
View(continuous_df_long)
View(continuous_df)
# Obtain continuous variables.
query <- 'SELECT age, wt, ht, bmi, leg, arml, armc, waist, tri, sub, gh, albumin, bun, SCr FROM diabetes_data'
continuous_df <- dbGetQuery(conn, query)
# Transform into a two col dataframe of variables and values. This is necessary for facet_wrap().
continuous_df_long <- melt(continuous_df)
# For each variable, plot a box plot.
ggplot(lol, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free")
# Obtain continuous variables.
query <- 'SELECT age, wt, ht, bmi, leg, arml, armc, waist, tri, sub, gh, albumin, bun, SCr FROM diabetes_data'
continuous_df <- dbGetQuery(conn, query)
# Transform into a two col dataframe of variables and values. This is necessary for facet_wrap().
continuous_df_long <- melt(continuous_df)
# For each variable, plot a box plot.
ggplot(lol, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free")
# Transform into a two col dataframe of variables and values. This is necessary for facet_wrap().
continuous_df_long <- melt(continuous_df)
# For each variable, plot a box plot.
ggplot(continuous_df_long, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free")
summary(continuous_df_long)
summary(continuous_df)
# Obtain continuous variables.
query <- 'SELECT age, wt, ht, bmi, leg, arml, armc, waist, tri, sub, gh, albumin, bun, SCr FROM diabetes_data'
continuous_df <- dbGetQuery(conn, query)
# Transform into a two col dataframe of variables and values. This is necessary for facet_wrap().
continuous_df_long <- melt(continuous_df)
# For each variable, plot a box plot.
ggplot(continuous_df_long, aes(x = variable, y = value)) +
geom_boxplot() +
facet_wrap(~ variable, scales = "free")
summary(continuous_df)
